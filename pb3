/*package whatever //do not write package name here */
question:Given an array arr of N integers. Find the contiguous sub-array with maximum sum.

Input:
The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.

Output:
Print the maximum sum of the contiguous sub-array in a separate line for each test case.

Constraints:
1 ≤ T ≤ 110
1 ≤ N ≤ 106
-107 ≤ A[i] <= 107

Example:
Input
2
5
1 2 3 -2 5
4
-1 -2 -3 -4
Output
9
-1

import java.lang.*;
import java.io.*;
import java.util.*;

class GFG{
	public static void main (String[] args) {
	    Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t-- > 0)
		{
		    int n = sc.nextInt();
		    long a[] = new long[n];
		    for(int i=0;i<n;i++)
		    {
		        a[i] = sc.nextLong();
		    }
		    int max =Integer.MIN_VALUE,max_here = 0;
		    for(int i=0;i<n;i++)
		    {
		        max_here += a[i];
		        if(max < max_here)
		            max = max_here;
		        if(max_here < 0)
		            max_here = 0;
		    }
		    System.out.println(max);
		}
	}
}
