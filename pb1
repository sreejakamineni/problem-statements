question : Given an unsorted array A of size N of non-negative integers, find a continuous sub-array which adds to a given number S.

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case consists of two lines. The first line of each test case is N and S, where N is the size of array and S is the sum. The second line of each test case contains N space separated integers denoting the array elements.

Output:
For each testcase, in a new line, print the starting and ending positions(1 indexing) of first such occuring subarray from the left if sum equals to subarray, else print -1.

Constraints:
1 <= T <= 100
1 <= N <= 107
1 <= Ai <= 1010

Example:
Input:
2
5 12
1 2 3 7 5
10 15
1 2 3 4 5 6 7 8 9 10
Output:
2 4
1 5

import java.util.*;
import java.lang.*;
import java.io.*;
import java.util.Scanner;

class GFG {
	public static void main (String[] args) {
	    int i,j,sum=0,flag=0;
	    Scanner sc = new Scanner(System.in);
	    int t = sc.nextInt();
	    while(t!=0)
	    {
	        t--;
	    int n = sc.nextInt();
	    int k = sc.nextInt();
	    int [] a= new int[n];
	    for(i=0;i<n;i++)
	    {
	       a[i] = sc.nextInt();
	    }
	    for(i=0;i<n;i++)
	    {
	        sum=0;
	        for(j=i;j<n;j++)
	        {
	            sum=sum+a[j];
	            if(sum==k)
	            {
	                System.out.println((i+1)+" "+(j+1));
	                flag=1;
	                break;
	            }
	    }
	if(sum==k)
	break;
	    }
	if(flag==0)
	{
	    System.out.println("-1");
	}
}
}
}
